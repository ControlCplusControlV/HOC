TODO-LIST
---------

This is a non-exhaustive list of immediate things to do before production.


unknowns unknowns

HVM:
- Correctness
  - Concurrency: model/visualize/debug atomics, locks, etc.
  - Functional compatibility: bracket/croissant primitives
- Optimizations
  - General: inspect and improve generated ASM
  - Procedural: inliner, loops, tail calls, local mutability, etc.
  - Functional: deforestation, linearizer, strictness analysis, anti-oracle, etc. 
  - Allocator: make growable or use mmap
  - RedexBag and VisitQueue: make growable
- Code Quality
  - Improve sanitizer
  - Improve flattener
  - Improve errors
  - Improve the reducer state-machine
  - Use standard parser
  - Ensure WASM compatibility
  - Test suite
- Features
  - Continuations: syntax and wiring
  - Scopeless lams/dups (semi-done, but ugly)
  - Async IO dispatcher thread
  - User-defined IO and FFI (addons)
  - Interaction-Net syntax
  - More numeric primitives
  - Lazy output (reduce, print, readback, etc.)
  - Lambda output: preserve var names
  - Debugger improvements
  - External API
  - Documentation
- JIT
  - Imperative AST definition
  - Compiler: HVM_Core -> Imp
  - Imp Inliner and Optimizer
  - Codegen: Imp -> ASM (CraneLift/LLVM/WASM?)
  - Dispatcher
- Research
  - Formalization: model HVM on Kind (IC)
  - FPGA Target: research and implement a VHDL
  - GPU Target: research and improve our CUDA prototype
  - ZkSnark Target: initial research

ThreadBender
- LangX->AST transpiler: compiles from lang X to IMP or FUN
  * This is a continuous process, langs like JS are huge and have many features
- Transpilers
  - IMP->FUN transpiler: compiles from the procedural AST to the functional AST
  - FUN->HVM transpiler: compiles from the functional AST to the HVM AST
- LangX Integration: integrates lang X to allow seamless HVM decoration

Kindelia
- Protocol: formalize the rules in Kind: agents, txs, execution, rollback, etc.
- Network: peer connection, block propagation, consensus algorithm

Kind
- Lang features: add missing features (getters/setters, loops, nested match, etc.)
- Proof features: termination checker, totality checker, etc.
- EAL+ Type-Checker: HVM-compatible subset ("whitelist")
- IO, FFI and App features: back-end server, app target (react, etc.), room-db
- HVM compiler: improvements & maintenance
- Tests and benchmark suite

Team
----

HVM:
- 1x Senior Rust Developer, type theory and inet background (taelin?)
  - 1x Rust Developer (Derenash)
  - 1x Rust Developer
- 1x Senior Rust Developer, Alice, parallel programming expert
- 1x Senior Rust Developer, Bob, low-level assembly expert
  - 1x Rust Developer, low-level assembly experience
  - 1x Rust Developer, low-level assembly experience
- 1x Senior Rust Developer, Joe, JIT expert
  - 1x Rust Developer, JIT experience
  - 1x Rust Developer, JIT experience

HVM-Research:
- 1x Coq Developer, Fulane
- 1x VHDL Developer, Delcrane
- 1x CUDA Developer, Beltrane
- 1x ZK Developer, Sicrane

ThreadBender
- 1x Senior Haskell Developer, experience in functional and compilers
  - 1x Haskell Developer, experience in functional and compilers (optional)
  - 1x Haskell Developer (Santi)
- 1x Senior Haskell Developer, experience in functional and compilers
  - 1x Haskell Developer, experience in functional and compilers (optional)
  - 1x Haskell Developer (Nicolas)

Kind
- 1x Haskell Developer (Chiyoku deus do kind)
  - 1x Haskell Developer, type theory expert (optional)
  - 1x Senior Haskell Developer, type theory expert (optional)

Kindelia
- 1x Senior Rust Developer, experience in networking and blockchains (optional)
  - 1x Rust Developer, experience in networking and blockchains (optional)

Notas: Estou cotando apenas o necessário para entregar a parte técnica do
produto. Não estou considerando landing page, billing, e similares. A maior
carga de trabalho será em tornar a HVM production ready. O ThreadBender, em si,
é relativamente muito mais simples. Porém o ThreadBender *depende* da HVM
funcionando para ter valor. Não adianta compilar JS para HVM e o código rodar
com menos eficiência, ou ter bugs. Todos os devs listados requerem alto nível de
senioridade (10+ anos de xp). É um projeto extremamente complexo tecnicamente.
